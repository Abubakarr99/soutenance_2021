---
# tasks file for wireguard

- name: setup the OS
  block:
    - name: prepare device
      include_tasks: "setup-{{ ansible_facts['distribution']|lower }}.yaml"

    - name: Enable WireGuard kernel module
      modprobe:
        name: wireguard
        state: present
      register: wireguard__register_module_enabled
      until: wireguard__register_module_enabled is succeeded
      retries: 10
      delay: 10
      failed_when: wireguard__register_module_enabled is failure
  rescue:
    - name: reminder to reboot
      debug:
        msg: "Reboot might be required to activate the wireguard module"

- name: Set default for WireGuard interface restart behavior
  set_fact:
    wireguard__restart_interface: >-
      {%- if wireguard_interface_restart -%}
      true
      {%- else -%}
      false
      {%- endif %}

- name: Make sure wg syncconf option is available
  block:
    - name: Get available wg subcommands
      command: "wg --help"
      register: wireguard__register_subcommands
      changed_when: false
      check_mode: false

    - name: Check if wg syncconf subcommand is available
      set_fact:
        wireguard__syncconf_avail: "{{ 'syncconf:' in wireguard__register_subcommands.stdout }}"

    - name: wg syncconf subcommand available
      debug:
        var: wireguard__syncconf_avail

    - name: Fall back to interface restart if wg syncconf is not available
      set_fact:
        wireguard__restart_interface: true
      when:
        - not wireguard__syncconf_avail
  when:
    - not wireguard_interface_restart

- name: Final decision on WireGuard interface restart method
  debug:
    msg: >-
      {%- if wireguard__restart_interface -%}
      'restart'
      {%- else -%}
      'syncconf'
      {%- endif %}

- name: Register if config/private key already exists on target host
  stat:
    path: "{{ wireguard_remote_directory }}/{{ wireguard_interface }}.conf"
  register: wireguard__register_config_file

- name: WireGuard private key handling for new keys
  block:
    - name: Generate WireGuard private key
      command: "wg genkey"
      register: wireguard__register_private_key
      changed_when: false
      no_log: '{{ ansible_verbosity < 3 }}'


    - name: Set private key fact
      set_fact:
        wireguard_private_key: "{{ wireguard__register_private_key.stdout }}"
      no_log: '{{ ansible_verbosity < 3 }}'
      tags:
        - wg-generate-keys
  when:
    - not wireguard__register_config_file.stat.exists
    - wireguard_private_key is not defined

- name: WireGuard private key handling for existing keys
  block:
    - name: Read WireGuard config file
      slurp:
        src: "{{ wireguard_remote_directory }}/{{ wireguard_interface }}.conf"
      register: wireguard__register_config
      no_log: '{{ ansible_verbosity < 3 }}'

    - name: Set private key fact
      set_fact:
        wireguard_private_key: "{{ wireguard__register_config['content'] | b64decode | regex_findall('PrivateKey = (.*)') | first }}"
      no_log: '{{ ansible_verbosity < 3 }}'
  when:
    - wireguard__register_config_file.stat.exists
    - wireguard_private_key is not defined

- name: Derive WireGuard public key
  command: "wg pubkey"
  args:
    stdin: "{{ wireguard_private_key }}"
  register: wireguard__register_public_key
  changed_when: false
  check_mode: false
  no_log: '{{ ansible_verbosity < 3 }}'
  tags:
    - wg-config

- name: Set public key fact
  set_fact:
    wireguard__fact_public_key: "{{ wireguard__register_public_key.stdout }}"
  tags:
    - wg-config

- name: Create WireGuard configuration directory
  file:
    dest: "{{ wireguard_remote_directory }}"
    state: directory
    mode: 0700
  tags:
    - wg-config

- name: Generate WireGuard configuration file
  template:
    src: wg.conf.j2
    dest: "{{ wireguard_remote_directory }}/{{ wireguard_interface }}.conf"
    owner: "{{ wireguard_conf_owner }}"
    group: "{{ wireguard_conf_group }}"
    mode: "{{ wireguard_conf_mode }}"
  notify:
    - reconfigure wireguard

- name: Ensure legacy reload-module-on-update is absent
  file:
    dest: "{{ wireguard_remote_directory }}/.reload-module-on-update"
    state: absent


- name: Start and enable WireGuard service
  service:
    name: "wg-quick@{{ wireguard_interface }}"
    state: "{{ wireguard_service_state }}"
    enabled: "{{ wireguard_service_enabled }}"


